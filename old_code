
<div class="fb_invite_friends">
  <%= form_tag('/fb_app_invite', id:"fb_invite_friends") %>
    <%= hidden_field_tag :current_user, @me["username"] %>
    <%= hidden_field_tag :invitees, nil, id:"invitees" %>
    <div class="invitees">
      <%= label_tag :invitees %></br>
      <%= text_area_tag :show_invitees, nil, id:"show_invitees", readonly: true, class:"required" %>
    </div>
    <div class="subject_message">
      <p>
        <%= label_tag :subject %></br>
        <%= text_field_tag :subject, nil, class:"required" %>
      </p>
      <p>
        <%= label_tag :message %></br>
        <%= text_area_tag :message, nil, class:"required" %>
      </p>
    </div>
    <div class="submit">
      <%= submit_tag "Send", class:"btn btn-rsvp btn-fb-invite" %>
    </div>
</div>

// INVITE => INVITED IN FIND FRIENDS
  $(".invite").click(
    function() {
        username = $(this).attr('alt');
        name = $(this).attr('name');
        if ($('#show_invitees').text().length == 0) {
        $('#invitees').attr('value', username);
        $('#show_invitees').text(name);
      }
        else {
        usernames = $('#invitees').attr('value');
        $('#invitees').attr('value', usernames + ", " + username);
        $('#show_invitees').append(", " + name);
      }
        $(this).removeClass('btn-success');
        $(this).addClass('btn_stop_viewing');
    });

keyup

class UserSearch
  constructor: ->
    @lastEvent = undefined
    @timer = undefined
    @oldValue = undefined
    $('#btn_user_search').on('click', @performSearch)
    $('#user_search_field').on('keyup', @setEventTimer)
    $('body').on('click', @checkHideResults)
    $('#search_form').on 'submit', ->
      return false

  checkHideResults: (e) =>
    window.target = e
    unless $(e.target).closest('#search_results').length || $(e.target).attr('id') == 'user_search_field' || $(e.target).attr('id') == 'btn_user_search'
      @hideResults()

  hideResults: ->
    $('#search_results').remove()
    $('#user_search_field').val('')
    $('.search_spinner').css({'background-position': 'right 21900915389012px'})

  setEventTimer: =>
    if $('#user_search_field').val().length == 0
      @hideResults()

    if $('#user_search_field').val().length > 1 # and $('#user_search_field').val() != @oldValue
      clearTimeout(@timer)
      @timer = setTimeout(@performSearch, 700)
      $('.search_spinner').css({'background-position': 'right'})
    @oldValue = $('#user_search_field').val()

  performSearch: (e) =>
    e?.preventDefault()
    $.ajax
      url: window.location
      success: -> 
        $('.search_spinner').css({'background-position': 'right 2000000px'})
      data:
        'search': $('#user_search_field').val()

$ ->
  new UserSearch() if $('#user_search_field').length




#OAUTH METHOD
  # def self.find_for_facebook_oauth(auth, signed_in_resource=nil)
  #   user = User.where(:provider => auth.provider, :uid => auth.uid).first
  #   unless user
  #     user = User.create(  name:auth.extra.raw_info.name,
  #                          provider:auth.provider,
  #                          uid:auth.uid,
  #                          email:auth.info.email,
  #                          password:Devise.friendly_token[0,20],
  #                          terms: 't',
  #                          city:auth.info.location
  #                          )
  #   end
  #   user
  # end

# https://github.com/pantulis/devise-omniauth-only-twitter/blob/master/app/models/user.rb

  # has_many :authentications
  
  # def self.find_for_twitter_oauth(omniauth)
  #   authentication = Authentication.find_by_provider_and_uuid(omniauth['provider'], omniauth['uid'])
  #   if authentication && authentication.user
  #     authentication.user
  #   else
  #     user = User.create!(:nickname => omniauth['nickname'], 
  #                           :name => omniauth['name'])
  #     user.authentications.create!(:provider => omniauth['provider'], :uuid => omniauth['uid'])
  #     user.save
  #     user
  #   end
  # end


FB events

upon sign up from facebook (omniauth_controller)
add method create_fb_events

in events model:

  def create_fb_events

    @graph.get_connections("me", "events")
    @graph.get_connections("me", "invitations")?

    [{"name"=>"Housewarming Party",
  "start_time"=>"2012-08-25T14:00:00-0500",
  "end_time"=>"2012-08-25T22:00:00-0500",
  "timezone"=>"America/Chicago",
  "location"=>"8954 Sunstone Ln Middleton, WI 53562",
  "id"=>"316821768413401",
  "rsvp_status"=>"attending"}]


  create dummy facebook user

  call asynchronously to get the events and invites 
    on each
      Check that they have start TIME
      if true
      Check on fb_id if events are already there
      if false
      determin the event's owner & privacy
        @graph.get_object("415061778552519")
        lookup host from hi's users by fb_id
        if present - create event with user as host and visibility
        else - create event with set fb_dummy is host and visibility
      create net new events and either RSVP or invite the user (if the events have start times)
  end

    create job to check at night if users should replace fb_dummy
      get all events from facebook using fb_event_id
      If owner = current_user && current owner = fb_dummy
        Then replace fb_dummy with current_user as owner of event

    # @plans = self.plans
    # @date_plans = []
    # @plans.each do |p|
    #   if p.starts_at.to_date == load_date
    #     p.inviter_id = p.user.id
    #     @date_plans.push(p)
    #   end
    # end

    # @date_invited_events = []
    # self.invitations.each do |i|
    #   e = Event.find_by_id(i.invited_event_id)
    #   if e.starts_at.to_date == load_date
    #     unless self.rsvpd?(e)
    #       e.inviter_id = i.inviter_id
    #       @date_invited_events.push(e)
    #     end
    #   end
    # end



  # def forecastoverview
  #   @forecastoverview = []
  #   (-3..16).each do |i|
  #     if self.time_zone
  #       @new_date = Time.now.in_time_zone(self.time_zone).to_date + i
  #     else
  #       @new_date = Date.today + i
  #     end
  #     @datecounts = []
      
  #     @ideacount = self.idea_count_on_date(@new_date)
  #     @plancount = self.plan_count_on_date(@new_date)
  #     @datecounts.push(@ideacount)
  #     @datecounts.push(@plancount)
  #     @forecastoverview.push(@datecounts)
  #   end
  #   return @forecastoverview
  # end

  # #these could be maintained on RSVP/unRSVP... maybe
  # def plan_count_on_date(load_date)
  #   @plancount = 0
  #   self.plans.each do |p|
  #     if p.starts_at.to_date == load_date
  #       @plancount = @plancount + 1
  #     end
  #   end
  #   return @plancount
  # end

  # def idea_count_on_date(load_date)
  #   @ideacount = 0

  #   @invitations = Invite.where('invites.email = :current_user_email', current_user_email: self.email)
  #   @invitations.each do |i|
  #     @ie = Event.find_by_id(i.event_id)
  #     if @ie.starts_at.to_date == load_date
  #       unless self.rsvpd?(@ie)
  #         @ideacount = @ideacount + 1
  #       end
  #     end
  #   end

  #   self.followed_users.each do |f|
  #     f.plans.each do |fp| #for friends of friends events that are RSVPd for
  #       if fp.starts_at.to_date == load_date
  #         unless fp.visibility == "invite_only" || self.rsvpd?(fp) || self.invited?(fp)
  #           if fp.user == f || fp.visibility == "friends_of_friends"
  #             @ideacount = @ideacount + 1
  #           end
  #         end
  #       end
  #     end
  #   end
  #   return @ideacount
  # end

_plans.html.erb
<div id='datepicker'>
  <%= render partial: 'shalendar/datepicker' %>
</div>

<div id='yt'><a href='#<%= Time.now.to_date %>' id='todayButton' class='btn-today'>Today</a></div>

<div class="home" id="scrollContainer">
<% for i in -3..26 %>
  <div class="each_day persist-area clearfix">    
    <div class="date_bar marker persist-header clearfix shield <% if i == 0 %> red <% end %>" <% if i == 0 %> id="today" <% end %> data-date=<%= "#{Time.now.to_date + i}" %>>
      <div class="date"><%= (Time.now.to_date + (i)).strftime("%A %b %e") %></div>
    </div>
    <div class="day_container clearfix">
      <div class="idea_container clearfix">
        <% if @ideas[i + 3].any? %>
          <% @ideas[i + 3].each do |e| %>
            <%= render :partial => "shalendar/event", :locals => { :event => e } %>
          <% end %>
        <% end %>
      </div>
    </div>
  </div>
<% end %>
</div>


    <% if false %>
      <li>
        <%= link_to post_to_own_fb_wall_path(:event_id => @event.id), class:"fadeInFBBlue" , confirm:"Post idea to your wall?", title:"Post to Facebook", remote: true do %>
          <i class="icon-facebook-sign"></i>
        <% end %>
      </li>
    <% end %>

    <!--     <li>
      <a href="https://twitter.com/share" 
        data-url="<%= event_url(@event) %>"
        data-via="hoos_in"
        data-size="large" 
        data-count="none" 
        class="fadeInTwitter" 
        title="<%= @event.title %> #hoosin" 
        target="_blank">
        <i class="icon-twitter"></i>
      </a>
    </li> -->


    <% if @event.guests_can_invite_friends? && !@event.short_url.nil? %>
      <li id="textMsg">
        <a href="sms:?body=<%= url_encode(@event.title + " - " + @event.short_url) %>"><span class="fadeInOrange"><i class="icon-phone"></i></span></a>
      </li> 
    <% end %> 


    Event#show
        <% if false %>
    <div class="host friend">
      <%= link_to user_path(@event.user), target: "blank" do %>
        <%= raster_profile_picture(@event.user) %> 
      <% end %>
      <div>hosted by: </div><br>
      <% if !user_signed_in? || (current_user.following?(@event.user) || current_user == @event.user) %>
        <div>
          <%= @event.user.name %>
        </div>
      <% else %>
        <div id="friend_name">
          <%= @event.user.name %>
        </div>
        <div id="friend_button" style="display:none;">
          <%= render  :partial => 'events/just_follow_form', :locals => { :user => @event.user } %>
        </div>
      <% end %>
    </div>
    <% end %>